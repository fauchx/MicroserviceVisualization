{"ast":null,"code":"\"use strict\";\n/*\r\n*  Copyright (C) 1998-2022 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\n\n/**\r\n  This class implements an inspector for GoJS model data objects.\r\n  The constructor takes three arguments:\r\n    {string} divid a string referencing the HTML ID of the to-be inspector's div.\r\n    {Diagram} diagram a reference to a GoJS Diagram.\r\n    {Object} options An optional JS Object describing options for the inspector.\r\n\r\n  Options:\r\n    inspectSelection {boolean} Default true, whether to automatically show and populate the Inspector\r\n                               with the currently selected Diagram Part. If set to false, the inspector won't show anything\r\n                               until you call Inspector.inspectObject(object) with a Part or JavaScript object as the argument.\r\n    includesOwnProperties {boolean} Default true, whether to list all properties currently on the inspected data object.\r\n    properties {Object} An object of string:Object pairs representing propertyName:propertyOptions.\r\n                        Can be used to include or exclude additional properties.\r\n    propertyModified function(propertyName, newValue) a callback\r\n    multipleSelection {boolean} Default false, whether to allow multiple selection and change the properties of all the selected instead of\r\n                                the single first object\r\n    showAllProperties {boolean} Default false, whether properties that are shown with multipleSelection use the intersect of the properties when false or the union when true\r\n                                only affects if multipleSelection is true\r\n    showSize {number} Defaults 0, shows how many nodes are showed when selecting multiple nodes\r\n                      when its lower than 1, it shows all nodes\r\n\r\n  Options for properties:\r\n    show: {boolean|function} a boolean value to show or hide the property from the inspector, or a predicate function to show conditionally.\r\n    readOnly: {boolean|function} whether or not the property is read-only\r\n    type: {string} a string describing the data type. Supported values: \"string|number|boolean|color|arrayofnumber|point|rect|size|spot|margin|select|checkbox|date|datetime-local|time\"\r\n    defaultValue: {*} a default value for the property. Defaults to the empty string.\r\n    choices: {Array|function} when type == \"select\", the Array of choices to use or a function that returns the Array of choices.\r\n\r\n  Example usage of Inspector:\r\n\r\n  var inspector = new Inspector(\"myInspector\", myDiagram,\r\n    {\r\n      includesOwnProperties: false,\r\n      properties: {\r\n        \"key\": { show: Inspector.showIfPresent, readOnly: true },\r\n        \"comments\": { show: Inspector.showIfNode  },\r\n        \"LinkComments\": { show: Inspector.showIfLink },\r\n        \"chosen\": { show: Inspector.showIfNode, type: \"checkbox\" },\r\n        \"state\": { show: Inspector.showIfNode, type: \"select\", choices: [\"Stopped\", \"Parked\", \"Moving\"] }\r\n      }\r\n    });\r\n\r\n  This is the basic HTML Structure that the Inspector creates within the given DIV element:\r\n\r\n  <div id=\"divid\" class=\"inspector\">\r\n    <tr>\r\n      <td>propertyName</td>\r\n      <td><input value=propertyValue /></td>\r\n    </tr>\r\n    ...\r\n  </div>\r\n\r\n*/\n\nfunction Inspector(divid, diagram, options) {\n  var mainDiv = document.getElementById(divid);\n  mainDiv.className = \"inspector\";\n  mainDiv.innerHTML = \"\";\n  this._div = mainDiv;\n  this._diagram = diagram;\n  this._inspectedProperties = {};\n  this._multipleProperties = {}; // Either a GoJS Part or a simple data object, such as Model.modelData\n\n  this.inspectedObject = null; // Inspector options defaults:\n\n  this.includesOwnProperties = true;\n  this.declaredProperties = {};\n  this.inspectsSelection = true;\n  this.propertyModified = null;\n  this.multipleSelection = false;\n  this.showAllProperties = false;\n  this.showSize = 0;\n\n  if (options !== undefined) {\n    if (options[\"includesOwnProperties\"] !== undefined) this.includesOwnProperties = options[\"includesOwnProperties\"];\n    if (options[\"properties\"] !== undefined) this.declaredProperties = options[\"properties\"];\n    if (options[\"inspectSelection\"] !== undefined) this.inspectsSelection = options[\"inspectSelection\"];\n    if (options[\"propertyModified\"] !== undefined) this.propertyModified = options[\"propertyModified\"];\n    if (options['multipleSelection'] !== undefined) this.multipleSelection = options['multipleSelection'];\n    if (options['showAllProperties'] !== undefined) this.showAllProperties = options['showAllProperties'];\n    if (options['showSize'] !== undefined) this.showSize = options['showSize'];\n  }\n\n  var self = this;\n  diagram.addModelChangedListener(function (e) {\n    if (e.isTransactionFinished) self.inspectObject();\n  });\n\n  if (this.inspectsSelection) {\n    diagram.addDiagramListener(\"ChangedSelection\", function (e) {\n      self.inspectObject();\n    });\n  }\n} // Some static predicates to use with the \"show\" property.\n\n\nInspector.showIfNode = function (part) {\n  return part instanceof go.Node;\n};\n\nInspector.showIfLink = function (part) {\n  return part instanceof go.Link;\n};\n\nInspector.showIfGroup = function (part) {\n  return part instanceof go.Group;\n}; // Only show the property if its present. Useful for \"key\" which will be shown on Nodes and Groups, but normally not on Links\n\n\nInspector.showIfPresent = function (data, propname) {\n  if (data instanceof go.Part) data = data.data;\n  return typeof data === \"object\" && data[propname] !== undefined;\n};\n/**\r\n* Update the HTML state of this Inspector given the properties of the {@link #inspectedObject}.\r\n* @param {Object} object is an optional argument, used when {@link #inspectSelection} is false to\r\n*                        set {@link #inspectedObject} and show and edit that object's properties.\r\n*/\n\n\nInspector.prototype.inspectObject = function (object) {\n  var inspectedObject = null;\n  var inspectedObjects = null;\n  if (object === null) return;\n\n  if (object === undefined) {\n    if (this.inspectsSelection) {\n      if (this.multipleSelection) {\n        // gets the selection if multiple selection is true\n        inspectedObjects = this._diagram.selection;\n        this._inspectedObject = inspectedObjects.first();\n      } else {\n        // otherwise grab the first object\n        inspectedObject = this._diagram.selection.first();\n      }\n    } else {\n      // if there is a single inspected object\n      inspectedObject = this.inspectedObject;\n    }\n  } else {\n    // if object was passed in as a parameter\n    inspectedObject = object;\n  }\n\n  if (inspectedObjects && inspectedObjects.count === 1) {\n    inspectedObject = inspectedObjects.first();\n  }\n\n  if (inspectedObjects && inspectedObjects.count <= 1) {\n    inspectedObjects = null;\n  } // single object or no objects\n\n\n  if (!inspectedObjects || !this.multipleSelection) {\n    if (inspectedObject === null) {\n      this.inspectedObject = inspectedObject;\n      this.updateAllHTML();\n      return;\n    }\n\n    this.inspectedObject = inspectedObject;\n    if (this.inspectObject === null) return;\n    var mainDiv = this._div;\n    mainDiv.innerHTML = ''; // use either the Part.data or the object itself (for model.modelData)\n\n    var data = inspectedObject instanceof go.Part ? inspectedObject.data : inspectedObject;\n    if (!data) return; // Build table:\n\n    var table = document.createElement('table');\n    var tbody = document.createElement('tbody');\n    this._inspectedProperties = {};\n    this.tabIndex = 0;\n    var declaredProperties = this.declaredProperties; // Go through all the properties passed in to the inspector and show them, if appropriate:\n\n    for (var name in declaredProperties) {\n      var desc = declaredProperties[name];\n      if (!this.canShowProperty(name, desc, inspectedObject)) continue;\n      var val = this.findValue(name, desc, data);\n      tbody.appendChild(this.buildPropertyRow(name, val));\n    } // Go through all the properties on the model data and show them, if appropriate:\n\n\n    if (this.includesOwnProperties) {\n      for (var k in data) {\n        if (k === '__gohashid') continue; // skip internal GoJS hash property\n\n        if (this._inspectedProperties[k]) continue; // already exists\n\n        if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\n        tbody.appendChild(this.buildPropertyRow(k, data[k]));\n      }\n    }\n\n    table.appendChild(tbody);\n    mainDiv.appendChild(table);\n  } else {\n    // multiple objects selected\n    var mainDiv = this._div;\n    mainDiv.innerHTML = '';\n    var shared = new go.Map(); // for properties that the nodes have in common\n\n    var properties = new go.Map(); // for adding properties\n\n    var all = new go.Map(); // used later to prevent changing properties when unneeded\n\n    var it = inspectedObjects.iterator; // Build table:\n\n    var table = document.createElement('table');\n    var tbody = document.createElement('tbody');\n    this._inspectedProperties = {};\n    this.tabIndex = 0;\n    var declaredProperties = this.declaredProperties;\n    it.next();\n    inspectedObject = it.value;\n    this.inspectedObject = inspectedObject;\n    var data = inspectedObject instanceof go.Part ? inspectedObject.data : inspectedObject;\n\n    if (data) {\n      // initial pass to set shared and all\n      // Go through all the properties passed in to the inspector and add them to the map, if appropriate:\n      for (var name in declaredProperties) {\n        var desc = declaredProperties[name];\n        if (!this.canShowProperty(name, desc, inspectedObject)) continue;\n        var val = this.findValue(name, desc, data);\n\n        if (val === '' && desc && desc.type === 'checkbox') {\n          shared.add(name, false);\n          all.add(name, false);\n        } else {\n          shared.add(name, val);\n          all.add(name, val);\n        }\n      } // Go through all the properties on the model data and add them to the map, if appropriate:\n\n\n      if (this.includesOwnProperties) {\n        for (var k in data) {\n          if (k === '__gohashid') continue; // skip internal GoJS hash property\n\n          if (this._inspectedProperties[k]) continue; // already exists\n\n          if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\n          shared.add(k, data[k]);\n          all.add(k, data[k]);\n        }\n      }\n    }\n\n    var nodecount = 2;\n\n    while (it.next() && (this.showSize < 1 || nodecount <= this.showSize)) {\n      // grabs all the properties from the other selected objects\n      properties.clear();\n      inspectedObject = it.value;\n\n      if (inspectedObject) {\n        // use either the Part.data or the object itself (for model.modelData)\n        data = inspectedObject instanceof go.Part ? inspectedObject.data : inspectedObject;\n\n        if (data) {\n          // Go through all the properties passed in to the inspector and add them to properties to add, if appropriate:\n          for (var name in declaredProperties) {\n            var desc = declaredProperties[name];\n            if (!this.canShowProperty(name, desc, inspectedObject)) continue;\n            var val = this.findValue(name, desc, data);\n\n            if (val === '' && desc && desc.type === 'checkbox') {\n              properties.add(name, false);\n            } else {\n              properties.add(name, val);\n            }\n          } // Go through all the properties on the model data and add them to properties to add, if appropriate:\n\n\n          if (this.includesOwnProperties) {\n            for (var k in data) {\n              if (k === '__gohashid') continue; // skip internal GoJS hash property\n\n              if (this._inspectedProperties[k]) continue; // already exists\n\n              if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\n              properties.add(k, data[k]);\n            }\n          }\n        }\n      }\n\n      if (!this.showAllProperties) {\n        // Cleans up shared map with properties that aren't shared between the selected objects\n        // Also adds properties to the add and shared maps if applicable\n        var addIt = shared.iterator;\n        var toRemove = [];\n\n        while (addIt.next()) {\n          if (properties.has(addIt.key)) {\n            var newVal = all.get(addIt.key) + '|' + properties.get(addIt.key);\n            all.set(addIt.key, newVal);\n\n            if (declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color' && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select' || !declaredProperties[addIt.key]) {\n              // for non-string properties i.e color\n              newVal = shared.get(addIt.key) + '|' + properties.get(addIt.key);\n              shared.set(addIt.key, newVal);\n            }\n          } else {\n            // toRemove array since addIt is still iterating\n            toRemove.push(addIt.key);\n          }\n        }\n\n        for (var i = 0; i < toRemove.length; i++) {\n          // removes anything that doesn't showAllPropertiess\n          shared.remove(toRemove[i]);\n          all.remove(toRemove[i]);\n        }\n      } else {\n        // Adds missing properties to all with the correct amount of seperators\n        var addIt = properties.iterator;\n\n        while (addIt.next()) {\n          if (all.has(addIt.key)) {\n            if (declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color' && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select' || !declaredProperties[addIt.key]) {\n              // for non-string properties i.e color\n              var newVal = all.get(addIt.key) + '|' + properties.get(addIt.key);\n              all.set(addIt.key, newVal);\n            }\n          } else {\n            var newVal = '';\n\n            for (var i = 0; i < nodecount - 1; i++) {\n              newVal += '|';\n            }\n\n            newVal += properties.get(addIt.key);\n            all.set(addIt.key, newVal);\n          }\n        } // Adds bars in case properties is not in all\n\n\n        addIt = all.iterator;\n\n        while (addIt.next()) {\n          if (!properties.has(addIt.key)) {\n            if (declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color' && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select' || !declaredProperties[addIt.key]) {\n              // for non-string properties i.e color\n              var newVal = all.get(addIt.key) + '|';\n              all.set(addIt.key, newVal);\n            }\n          }\n        }\n      }\n\n      nodecount++;\n    } // builds the table property rows and sets multipleProperties to help with updateall\n\n\n    var mapIt;\n    if (!this.showAllProperties) mapIt = shared.iterator;else mapIt = all.iterator;\n\n    while (mapIt.next()) {\n      tbody.appendChild(this.buildPropertyRow(mapIt.key, mapIt.value)); // shows the properties that are allowed\n    }\n\n    table.appendChild(tbody);\n    mainDiv.appendChild(table);\n    var allIt = all.iterator;\n\n    while (allIt.next()) {\n      this._multipleProperties[allIt.key] = allIt.value; // used for updateall to know which properties to change\n    }\n  }\n};\n/**\r\n* @ignore\r\n* This predicate should be false if the given property should not be shown.\r\n* Normally it only checks the value of \"show\" on the property descriptor.\r\n* The default value is true.\r\n* @param {string} propertyName the property name\r\n* @param {Object} propertyDesc the property descriptor\r\n* @param {Object} inspectedObject the data object\r\n* @return {boolean} whether a particular property should be shown in this Inspector\r\n*/\n\n\nInspector.prototype.canShowProperty = function (propertyName, propertyDesc, inspectedObject) {\n  if (propertyDesc.show === false) return false; // if \"show\" is a predicate, make sure it passes or do not show this property\n\n  if (typeof propertyDesc.show === \"function\") return propertyDesc.show(inspectedObject, propertyName);\n  return true;\n};\n/**\r\n* @ignore\r\n* This predicate should be false if the given property should not be editable by the user.\r\n* Normally it only checks the value of \"readOnly\" on the property descriptor.\r\n* The default value is true.\r\n* @param {string} propertyName the property name\r\n* @param {Object} propertyDesc the property descriptor\r\n* @param {Object} inspectedObject the data object\r\n* @return {boolean} whether a particular property should be shown in this Inspector\r\n*/\n\n\nInspector.prototype.canEditProperty = function (propertyName, propertyDesc, inspectedObject) {\n  if (this._diagram.isReadOnly || this._diagram.isModelReadOnly) return false; // assume property values that are functions of Objects cannot be edited\n\n  var data = inspectedObject instanceof go.Part ? inspectedObject.data : inspectedObject;\n  var valtype = typeof data[propertyName];\n  if (valtype === \"function\") return false;\n\n  if (propertyDesc) {\n    if (propertyDesc.readOnly === true) return false; // if \"readOnly\" is a predicate, make sure it passes or do not show this property\n\n    if (typeof propertyDesc.readOnly === \"function\") return !propertyDesc.readOnly(inspectedObject, propertyName);\n  }\n\n  return true;\n};\n/**\r\n * @ignore\r\n * @param {any} propName\r\n * @param {any} propDesc\r\n * @param {any} data\r\n * @return {any}\r\n */\n\n\nInspector.prototype.findValue = function (propName, propDesc, data) {\n  var val = '';\n  if (propDesc && propDesc.defaultValue !== undefined) val = propDesc.defaultValue;\n  if (data[propName] !== undefined) val = data[propName];\n  if (val === undefined) return '';\n  return val;\n};\n/**\r\n* @ignore\r\n* This sets this._inspectedProperties[propertyName] and creates the HTML table row:\r\n*    <tr>\r\n*      <td>propertyName</td>\r\n*      <td><input value=propertyValue /></td>\r\n*    </tr>\r\n* @param {string} propertyName the property name\r\n* @param {*} propertyValue the property value\r\n* @return the table row\r\n*/\n\n\nInspector.prototype.buildPropertyRow = function (propertyName, propertyValue) {\n  var mainDiv = this._div;\n  var tr = document.createElement(\"tr\");\n  var td1 = document.createElement(\"td\");\n  td1.textContent = propertyName;\n  tr.appendChild(td1);\n  var td2 = document.createElement(\"td\");\n  var decProp = this.declaredProperties[propertyName];\n  var input = null;\n  var self = this;\n\n  function updateall() {\n    self.updateAllProperties();\n  }\n\n  if (decProp && decProp.type === \"select\") {\n    input = document.createElement(\"select\");\n    this.updateSelect(decProp, input, propertyName, propertyValue);\n    input.addEventListener(\"change\", updateall);\n  } else {\n    input = document.createElement(\"input\");\n\n    if (input.setPointerCapture) {\n      input.addEventListener(\"pointerdown\", function (e) {\n        input.setPointerCapture(e.pointerId);\n      });\n    }\n\n    input.value = this.convertToString(propertyValue);\n\n    if (decProp) {\n      var t = decProp.type;\n\n      if (t !== 'string' && t !== 'number' && t !== 'boolean' && t !== 'arrayofnumber' && t !== 'point' && t !== 'size' && t !== 'rect' && t !== 'spot' && t !== 'margin') {\n        input.setAttribute(\"type\", decProp.type);\n      }\n\n      if (decProp.type === \"color\") {\n        if (input.type === \"color\") {\n          input.value = this.convertToColor(propertyValue); // input.addEventListener(\"input\", updateall);\n\n          input.addEventListener(\"change\", updateall);\n        }\n      }\n\n      if (decProp.type === \"checkbox\") {\n        input.checked = !!propertyValue;\n        input.addEventListener(\"change\", updateall);\n      }\n    }\n\n    if (input.type !== \"color\") input.addEventListener(\"blur\", updateall);\n  }\n\n  if (input) {\n    input.tabIndex = this.tabIndex++;\n    input.disabled = !this.canEditProperty(propertyName, decProp, this.inspectedObject);\n    td2.appendChild(input);\n  }\n\n  tr.appendChild(td2);\n  this._inspectedProperties[propertyName] = input;\n  return tr;\n};\n/**\r\n* @ignore\r\n* HTML5 color input will only take hex,\r\n* so var HTML5 canvas convert the color into hex format.\r\n* This converts \"rgb(255, 0, 0)\" into \"#FF0000\", etc.\r\n* @param {string} propertyValue\r\n* @return {string}\r\n*/\n\n\nInspector.prototype.convertToColor = function (propertyValue) {\n  var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n  ctx.fillStyle = propertyValue;\n  return ctx.fillStyle;\n};\n/**\r\n* @ignore\r\n* @param {string}\r\n* @return {Array.<number>}\r\n*/\n\n\nInspector.prototype.convertToArrayOfNumber = function (propertyValue) {\n  if (propertyValue === \"null\") return null;\n  var split = propertyValue.split(' ');\n  var arr = [];\n\n  for (var i = 0; i < split.length; i++) {\n    var str = split[i];\n    if (!str) continue;\n    arr.push(parseFloat(str));\n  }\n\n  return arr;\n};\n/**\r\n* @ignore\r\n* @param {*}\r\n* @return {string}\r\n*/\n\n\nInspector.prototype.convertToString = function (x) {\n  if (x === undefined) return \"undefined\";\n  if (x === null) return \"null\";\n  if (x instanceof go.Point) return go.Point.stringify(x);\n  if (x instanceof go.Size) return go.Size.stringify(x);\n  if (x instanceof go.Rect) return go.Rect.stringify(x);\n  if (x instanceof go.Spot) return go.Spot.stringify(x);\n  if (x instanceof go.Margin) return go.Margin.stringify(x);\n  if (x instanceof go.List) return this.convertToString(x.toArray());\n\n  if (Array.isArray(x)) {\n    var str = \"\";\n\n    for (var i = 0; i < x.length; i++) {\n      if (i > 0) str += \" \";\n      var v = x[i];\n      str += this.convertToString(v);\n    }\n\n    return str;\n  }\n\n  return x.toString();\n};\n/**\r\n* @ignore\r\n* Update all of the HTML in this Inspector.\r\n*/\n\n\nInspector.prototype.updateAllHTML = function () {\n  var inspectedProps = this._inspectedProperties;\n  var diagram = this._diagram;\n  var isPart = this.inspectedObject instanceof go.Part;\n  var data = isPart ? this.inspectedObject.data : this.inspectedObject;\n\n  if (!data) {\n    // clear out all of the fields\n    for (var name in inspectedProps) {\n      var input = inspectedProps[name];\n\n      if (input instanceof HTMLSelectElement) {\n        input.innerHTML = \"\";\n      } else if (input.type === \"color\") {\n        input.value = \"#000000\";\n      } else if (input.type === \"checkbox\") {\n        input.checked = false;\n      } else {\n        input.value = \"\";\n      }\n    }\n  } else {\n    for (var name in inspectedProps) {\n      var input = inspectedProps[name];\n      var propertyValue = data[name];\n\n      if (input instanceof HTMLSelectElement) {\n        var decProp = this.declaredProperties[name];\n        this.updateSelect(decProp, input, name, propertyValue);\n      } else if (input.type === \"color\") {\n        input.value = this.convertToColor(propertyValue);\n      } else if (input.type === \"checkbox\") {\n        input.checked = !!propertyValue;\n      } else {\n        input.value = this.convertToString(propertyValue);\n      }\n    }\n  }\n};\n/**\r\n* @ignore\r\n* Update an HTMLSelectElement with an appropriate list of choices, given the propertyName\r\n*/\n\n\nInspector.prototype.updateSelect = function (decProp, select, propertyName, propertyValue) {\n  select.innerHTML = \"\"; // clear out anything that was there\n\n  var choices = decProp.choices;\n  if (typeof choices === \"function\") choices = choices(this.inspectedObject, propertyName);\n  if (!Array.isArray(choices)) choices = [];\n  decProp.choicesArray = choices; // remember list of actual choice values (not strings)\n\n  for (var i = 0; i < choices.length; i++) {\n    var choice = choices[i];\n    var opt = document.createElement(\"option\");\n    opt.text = this.convertToString(choice);\n    select.add(opt, null);\n  }\n\n  select.value = this.convertToString(propertyValue);\n};\n/**\r\n* @ignore\r\n* Update all of the data properties of {@link #inspectedObject} according to the\r\n* current values held in the HTML input elements.\r\n*/\n\n\nInspector.prototype.updateAllProperties = function () {\n  var inspectedProps = this._inspectedProperties;\n  var diagram = this._diagram;\n\n  if (diagram.selection.count === 1 || !this.multipleSelection) {\n    // single object update\n    var isPart = this.inspectedObject instanceof go.Part;\n    var data = isPart ? this.inspectedObject.data : this.inspectedObject;\n    if (!data) return; // must not try to update data when there's no data!\n\n    diagram.startTransaction('set all properties');\n\n    for (var name in inspectedProps) {\n      var input = inspectedProps[name];\n      var value = input.value; // don't update \"readOnly\" data properties\n\n      var decProp = this.declaredProperties[name];\n      if (!this.canEditProperty(name, decProp, this.inspectedObject)) continue; // If it's a boolean, or if its previous value was boolean,\n      // parse the value to be a boolean and then update the input.value to match\n\n      var type = '';\n\n      if (decProp !== undefined && decProp.type !== undefined) {\n        type = decProp.type;\n      }\n\n      if (type === '') {\n        var oldval = data[name];\n        if (typeof oldval === 'boolean') type = 'boolean'; // infer boolean\n        else if (typeof oldval === 'number') type = 'number';else if (oldval instanceof go.Point) type = 'point';else if (oldval instanceof go.Size) type = 'size';else if (oldval instanceof go.Rect) type = 'rect';else if (oldval instanceof go.Spot) type = 'spot';else if (oldval instanceof go.Margin) type = 'margin';\n      } // convert to specific type, if needed\n\n\n      switch (type) {\n        case 'boolean':\n          value = !(value === false || value === 'false' || value === '0');\n          break;\n\n        case 'number':\n          value = parseFloat(value);\n          break;\n\n        case 'arrayofnumber':\n          value = this.convertToArrayOfNumber(value);\n          break;\n\n        case 'point':\n          value = go.Point.parse(value);\n          break;\n\n        case 'size':\n          value = go.Size.parse(value);\n          break;\n\n        case 'rect':\n          value = go.Rect.parse(value);\n          break;\n\n        case 'spot':\n          value = go.Spot.parse(value);\n          break;\n\n        case 'margin':\n          value = go.Margin.parse(value);\n          break;\n\n        case 'checkbox':\n          value = input.checked;\n          break;\n\n        case 'select':\n          value = decProp.choicesArray[input.selectedIndex];\n          break;\n      } // in case parsed to be different, such as in the case of boolean values,\n      // the value shown should match the actual value\n\n\n      input.value = value; // modify the data object in an undo-able fashion\n\n      diagram.model.setDataProperty(data, name, value); // notify any listener\n\n      if (this.propertyModified !== null) this.propertyModified(name, value, this);\n    }\n\n    diagram.commitTransaction('set all properties');\n  } else {\n    // selection object update\n    diagram.startTransaction('set all properties');\n\n    for (var name in inspectedProps) {\n      var input = inspectedProps[name];\n      var value = input.value;\n      var arr1 = value.split('|');\n      var arr2 = [];\n\n      if (this._multipleProperties[name]) {\n        // don't split if it is union and its checkbox type\n        if (this.declaredProperties[name] && this.declaredProperties[name].type === 'checkbox' && this.showAllProperties) {\n          arr2.push(this._multipleProperties[name]);\n        } else {\n          arr2 = this._multipleProperties[name].toString().split('|');\n        }\n      }\n\n      var it = diagram.selection.iterator;\n      var change = false;\n      if (this.declaredProperties[name] && this.declaredProperties[name].type === 'checkbox') change = true; // always change checkbox\n\n      if (arr1.length < arr2.length // i.e Alpha|Beta -> Alpha procs the change\n      && (!this.declaredProperties[name] // from and to links\n      || !(this.declaredProperties[name] // do not change color checkbox and choices due to them always having less\n      && (this.declaredProperties[name].type === 'color' || this.declaredProperties[name].type === 'checkbox' || this.declaredProperties[name].type === 'choices')))) {\n        change = true;\n      } else {\n        // standard detection in change in properties\n        for (var j = 0; j < arr1.length && j < arr2.length; j++) {\n          if (!(arr1[j] === arr2[j]) && !(this.declaredProperties[name] && this.declaredProperties[name].type === 'color' && arr1[j].toLowerCase() === arr2[j].toLowerCase())) {\n            change = true;\n          }\n        }\n      }\n\n      if (change) {\n        // only change properties it needs to change instead all of them\n        for (var i = 0; i < diagram.selection.count; i++) {\n          it.next();\n          var isPart = it.value instanceof go.Part;\n          var data = isPart ? it.value.data : it.value;\n\n          if (data) {\n            // ignores the selected node if there is no data\n            if (i < arr1.length) value = arr1[i];else value = arr1[0]; // don't update \"readOnly\" data properties\n\n            var decProp = this.declaredProperties[name];\n            if (!this.canEditProperty(name, decProp, it.value)) continue; // If it's a boolean, or if its previous value was boolean,\n            // parse the value to be a boolean and then update the input.value to match\n\n            var type = '';\n\n            if (decProp !== undefined && decProp.type !== undefined) {\n              type = decProp.type;\n            }\n\n            if (type === '') {\n              var oldval = data[name];\n              if (typeof oldval === 'boolean') type = 'boolean'; // infer boolean\n              else if (typeof oldval === 'number') type = 'number';else if (oldval instanceof go.Point) type = 'point';else if (oldval instanceof go.Size) type = 'size';else if (oldval instanceof go.Rect) type = 'rect';else if (oldval instanceof go.Spot) type = 'spot';else if (oldval instanceof go.Margin) type = 'margin';\n            } // convert to specific type, if needed\n\n\n            switch (type) {\n              case 'boolean':\n                value = !(value === false || value === 'false' || value === '0');\n                break;\n\n              case 'number':\n                value = parseFloat(value);\n                break;\n\n              case 'arrayofnumber':\n                value = this.convertToArrayOfNumber(value);\n                break;\n\n              case 'point':\n                value = go.Point.parse(value);\n                break;\n\n              case 'size':\n                value = go.Size.parse(value);\n                break;\n\n              case 'rect':\n                value = go.Rect.parse(value);\n                break;\n\n              case 'spot':\n                value = go.Spot.parse(value);\n                break;\n\n              case 'margin':\n                value = go.Margin.parse(value);\n                break;\n\n              case 'checkbox':\n                value = input.checked;\n                break;\n\n              case 'select':\n                value = decProp.choicesArray[input.selectedIndex];\n                break;\n            } // in case parsed to be different, such as in the case of boolean values,\n            // the value shown should match the actual value\n\n\n            input.value = value; // modify the data object in an undo-able fashion\n\n            diagram.model.setDataProperty(data, name, value); // notify any listener\n\n            if (this.propertyModified !== null) this.propertyModified(name, value, this);\n          }\n        }\n      }\n    }\n\n    diagram.commitTransaction('set all properties');\n  }\n};","map":{"version":3,"names":["Inspector","divid","diagram","options","mainDiv","document","getElementById","className","innerHTML","_div","_diagram","_inspectedProperties","_multipleProperties","inspectedObject","includesOwnProperties","declaredProperties","inspectsSelection","propertyModified","multipleSelection","showAllProperties","showSize","undefined","self","addModelChangedListener","e","isTransactionFinished","inspectObject","addDiagramListener","showIfNode","part","go","Node","showIfLink","Link","showIfGroup","Group","showIfPresent","data","propname","Part","prototype","object","inspectedObjects","selection","_inspectedObject","first","count","updateAllHTML","table","createElement","tbody","tabIndex","name","desc","canShowProperty","val","findValue","appendChild","buildPropertyRow","k","shared","Map","properties","all","it","iterator","next","value","type","add","nodecount","clear","addIt","toRemove","has","key","newVal","get","set","push","i","length","remove","mapIt","allIt","propertyName","propertyDesc","show","canEditProperty","isReadOnly","isModelReadOnly","valtype","readOnly","propName","propDesc","defaultValue","propertyValue","tr","td1","textContent","td2","decProp","input","updateall","updateAllProperties","updateSelect","addEventListener","setPointerCapture","pointerId","convertToString","t","setAttribute","convertToColor","checked","disabled","ctx","getContext","fillStyle","convertToArrayOfNumber","split","arr","str","parseFloat","x","Point","stringify","Size","Rect","Spot","Margin","List","toArray","Array","isArray","v","toString","inspectedProps","isPart","HTMLSelectElement","select","choices","choicesArray","choice","opt","text","startTransaction","oldval","parse","selectedIndex","model","setDataProperty","commitTransaction","arr1","arr2","change","j","toLowerCase"],"sources":["C:/visualizacion_microservicios/src/DataInspector.js"],"sourcesContent":["\"use strict\";\r\n/*\r\n*  Copyright (C) 1998-2022 by Northwoods Software Corporation. All Rights Reserved.\r\n*/\r\n\r\n/**\r\n  This class implements an inspector for GoJS model data objects.\r\n  The constructor takes three arguments:\r\n    {string} divid a string referencing the HTML ID of the to-be inspector's div.\r\n    {Diagram} diagram a reference to a GoJS Diagram.\r\n    {Object} options An optional JS Object describing options for the inspector.\r\n\r\n  Options:\r\n    inspectSelection {boolean} Default true, whether to automatically show and populate the Inspector\r\n                               with the currently selected Diagram Part. If set to false, the inspector won't show anything\r\n                               until you call Inspector.inspectObject(object) with a Part or JavaScript object as the argument.\r\n    includesOwnProperties {boolean} Default true, whether to list all properties currently on the inspected data object.\r\n    properties {Object} An object of string:Object pairs representing propertyName:propertyOptions.\r\n                        Can be used to include or exclude additional properties.\r\n    propertyModified function(propertyName, newValue) a callback\r\n    multipleSelection {boolean} Default false, whether to allow multiple selection and change the properties of all the selected instead of\r\n                                the single first object\r\n    showAllProperties {boolean} Default false, whether properties that are shown with multipleSelection use the intersect of the properties when false or the union when true\r\n                                only affects if multipleSelection is true\r\n    showSize {number} Defaults 0, shows how many nodes are showed when selecting multiple nodes\r\n                      when its lower than 1, it shows all nodes\r\n\r\n  Options for properties:\r\n    show: {boolean|function} a boolean value to show or hide the property from the inspector, or a predicate function to show conditionally.\r\n    readOnly: {boolean|function} whether or not the property is read-only\r\n    type: {string} a string describing the data type. Supported values: \"string|number|boolean|color|arrayofnumber|point|rect|size|spot|margin|select|checkbox|date|datetime-local|time\"\r\n    defaultValue: {*} a default value for the property. Defaults to the empty string.\r\n    choices: {Array|function} when type == \"select\", the Array of choices to use or a function that returns the Array of choices.\r\n\r\n  Example usage of Inspector:\r\n\r\n  var inspector = new Inspector(\"myInspector\", myDiagram,\r\n    {\r\n      includesOwnProperties: false,\r\n      properties: {\r\n        \"key\": { show: Inspector.showIfPresent, readOnly: true },\r\n        \"comments\": { show: Inspector.showIfNode  },\r\n        \"LinkComments\": { show: Inspector.showIfLink },\r\n        \"chosen\": { show: Inspector.showIfNode, type: \"checkbox\" },\r\n        \"state\": { show: Inspector.showIfNode, type: \"select\", choices: [\"Stopped\", \"Parked\", \"Moving\"] }\r\n      }\r\n    });\r\n\r\n  This is the basic HTML Structure that the Inspector creates within the given DIV element:\r\n\r\n  <div id=\"divid\" class=\"inspector\">\r\n    <tr>\r\n      <td>propertyName</td>\r\n      <td><input value=propertyValue /></td>\r\n    </tr>\r\n    ...\r\n  </div>\r\n\r\n*/\r\nfunction Inspector(divid, diagram, options) {\r\n  var mainDiv = document.getElementById(divid);\r\n  mainDiv.className = \"inspector\";\r\n  mainDiv.innerHTML = \"\";\r\n  this._div = mainDiv;\r\n  this._diagram = diagram;\r\n  this._inspectedProperties = {};\r\n  this._multipleProperties = {};\r\n\r\n  // Either a GoJS Part or a simple data object, such as Model.modelData\r\n  this.inspectedObject = null;\r\n\r\n  // Inspector options defaults:\r\n  this.includesOwnProperties = true;\r\n  this.declaredProperties = {};\r\n  this.inspectsSelection = true;\r\n  this.propertyModified = null;\r\n  this.multipleSelection = false;\r\n  this.showAllProperties = false;\r\n  this.showSize = 0;\r\n\r\n  if (options !== undefined) {\r\n    if (options[\"includesOwnProperties\"] !== undefined) this.includesOwnProperties = options[\"includesOwnProperties\"];\r\n    if (options[\"properties\"] !== undefined) this.declaredProperties = options[\"properties\"];\r\n    if (options[\"inspectSelection\"] !== undefined) this.inspectsSelection = options[\"inspectSelection\"];\r\n    if (options[\"propertyModified\"] !== undefined) this.propertyModified = options[\"propertyModified\"];\r\n    if (options['multipleSelection'] !== undefined) this.multipleSelection = options['multipleSelection'];\r\n    if (options['showAllProperties'] !== undefined) this.showAllProperties = options['showAllProperties'];\r\n    if (options['showSize'] !== undefined) this.showSize = options['showSize'];\r\n  }\r\n\r\n  var self = this;\r\n  diagram.addModelChangedListener(function(e) {\r\n    if (e.isTransactionFinished) self.inspectObject();\r\n  });\r\n  if (this.inspectsSelection) {\r\n    diagram.addDiagramListener(\"ChangedSelection\", function(e) { self.inspectObject(); });\r\n  }\r\n}\r\n\r\n// Some static predicates to use with the \"show\" property.\r\nInspector.showIfNode = function(part) { return part instanceof go.Node };\r\nInspector.showIfLink = function(part) { return part instanceof go.Link };\r\nInspector.showIfGroup = function(part) { return part instanceof go.Group };\r\n\r\n// Only show the property if its present. Useful for \"key\" which will be shown on Nodes and Groups, but normally not on Links\r\nInspector.showIfPresent = function(data, propname) {\r\n  if (data instanceof go.Part) data = data.data;\r\n  return typeof data === \"object\" && data[propname] !== undefined;\r\n};\r\n\r\n/**\r\n* Update the HTML state of this Inspector given the properties of the {@link #inspectedObject}.\r\n* @param {Object} object is an optional argument, used when {@link #inspectSelection} is false to\r\n*                        set {@link #inspectedObject} and show and edit that object's properties.\r\n*/\r\nInspector.prototype.inspectObject = function(object) {\r\n  var inspectedObject = null;\r\n  var inspectedObjects = null;\r\n  if (object === null) return;\r\n  if (object === undefined) {\r\n    if (this.inspectsSelection) {\r\n      if (this.multipleSelection) { // gets the selection if multiple selection is true\r\n        inspectedObjects = this._diagram.selection;\r\n        this._inspectedObject = inspectedObjects.first();\r\n      } else { // otherwise grab the first object\r\n        inspectedObject = this._diagram.selection.first();\r\n      }\r\n    } else { // if there is a single inspected object\r\n      inspectedObject = this.inspectedObject;\r\n    }\r\n  } else { // if object was passed in as a parameter\r\n    inspectedObject = object;\r\n  }\r\n  if (inspectedObjects && inspectedObjects.count === 1) {\r\n    inspectedObject = inspectedObjects.first();\r\n  }\r\n  if (inspectedObjects && inspectedObjects.count <= 1) {\r\n    inspectedObjects = null;\r\n  }\r\n\r\n  // single object or no objects\r\n  if (!inspectedObjects || !this.multipleSelection) {\r\n    if (inspectedObject === null) {\r\n      this.inspectedObject = inspectedObject;\r\n      this.updateAllHTML();\r\n      return;\r\n    }\r\n\r\n    this.inspectedObject = inspectedObject;\r\n    if (this.inspectObject === null) return;\r\n    var mainDiv = this._div;\r\n    mainDiv.innerHTML = '';\r\n\r\n    // use either the Part.data or the object itself (for model.modelData)\r\n    var data = (inspectedObject instanceof go.Part) ? inspectedObject.data : inspectedObject;\r\n    if (!data) return;\r\n    // Build table:\r\n    var table = document.createElement('table');\r\n    var tbody = document.createElement('tbody');\r\n    this._inspectedProperties = {};\r\n    this.tabIndex = 0;\r\n    var declaredProperties = this.declaredProperties;\r\n\r\n    // Go through all the properties passed in to the inspector and show them, if appropriate:\r\n    for (var name in declaredProperties) {\r\n      var desc = declaredProperties[name];\r\n      if (!this.canShowProperty(name, desc, inspectedObject)) continue;\r\n      var val = this.findValue(name, desc, data);\r\n      tbody.appendChild(this.buildPropertyRow(name, val));\r\n    }\r\n    // Go through all the properties on the model data and show them, if appropriate:\r\n    if (this.includesOwnProperties) {\r\n      for (var k in data) {\r\n        if (k === '__gohashid') continue; // skip internal GoJS hash property\r\n        if (this._inspectedProperties[k]) continue; // already exists\r\n        if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\r\n        tbody.appendChild(this.buildPropertyRow(k, data[k]));\r\n      }\r\n    }\r\n\r\n    table.appendChild(tbody);\r\n    mainDiv.appendChild(table);\r\n  } else { // multiple objects selected\r\n    var mainDiv = this._div;\r\n    mainDiv.innerHTML = '';\r\n    var shared = new go.Map(); // for properties that the nodes have in common\r\n    var properties = new go.Map(); // for adding properties\r\n    var all = new go.Map(); // used later to prevent changing properties when unneeded\r\n    var it = inspectedObjects.iterator;\r\n    // Build table:\r\n    var table = document.createElement('table');\r\n    var tbody = document.createElement('tbody');\r\n    this._inspectedProperties = {};\r\n    this.tabIndex = 0;\r\n    var declaredProperties = this.declaredProperties;\r\n    it.next();\r\n    inspectedObject = it.value;\r\n    this.inspectedObject = inspectedObject;\r\n    var data = (inspectedObject instanceof go.Part) ? inspectedObject.data : inspectedObject;\r\n    if (data) { // initial pass to set shared and all\r\n      // Go through all the properties passed in to the inspector and add them to the map, if appropriate:\r\n      for (var name in declaredProperties) {\r\n        var desc = declaredProperties[name];\r\n        if (!this.canShowProperty(name, desc, inspectedObject)) continue;\r\n        var val = this.findValue(name, desc, data);\r\n        if (val === '' && desc && desc.type === 'checkbox') {\r\n          shared.add(name, false);\r\n          all.add(name, false);\r\n        } else {\r\n          shared.add(name, val);\r\n          all.add(name, val);\r\n        }\r\n      }\r\n      // Go through all the properties on the model data and add them to the map, if appropriate:\r\n      if (this.includesOwnProperties) {\r\n        for (var k in data) {\r\n          if (k === '__gohashid') continue; // skip internal GoJS hash property\r\n          if (this._inspectedProperties[k]) continue; // already exists\r\n          if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\r\n          shared.add(k, data[k]);\r\n          all.add(k, data[k]);\r\n        }\r\n      }\r\n    }\r\n    var nodecount = 2;\r\n    while (it.next() && (this.showSize < 1 || nodecount <= this.showSize)) { // grabs all the properties from the other selected objects\r\n      properties.clear();\r\n      inspectedObject = it.value;\r\n      if (inspectedObject) {\r\n        // use either the Part.data or the object itself (for model.modelData)\r\n        data = (inspectedObject instanceof go.Part) ? inspectedObject.data : inspectedObject;\r\n        if (data) {\r\n          // Go through all the properties passed in to the inspector and add them to properties to add, if appropriate:\r\n          for (var name in declaredProperties) {\r\n            var desc = declaredProperties[name];\r\n            if (!this.canShowProperty(name, desc, inspectedObject)) continue;\r\n            var val = this.findValue(name, desc, data);\r\n            if (val === '' && desc && desc.type === 'checkbox') {\r\n              properties.add(name, false);\r\n            } else {\r\n              properties.add(name, val);\r\n            }\r\n          }\r\n          // Go through all the properties on the model data and add them to properties to add, if appropriate:\r\n          if (this.includesOwnProperties) {\r\n            for (var k in data) {\r\n              if (k === '__gohashid') continue; // skip internal GoJS hash property\r\n              if (this._inspectedProperties[k]) continue; // already exists\r\n              if (declaredProperties[k] && !this.canShowProperty(k, declaredProperties[k], inspectedObject)) continue;\r\n              properties.add(k, data[k]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!this.showAllProperties) {\r\n        // Cleans up shared map with properties that aren't shared between the selected objects\r\n        // Also adds properties to the add and shared maps if applicable\r\n        var addIt = shared.iterator;\r\n        var toRemove = [];\r\n        while (addIt.next()) {\r\n          if (properties.has(addIt.key)) {\r\n            var newVal = all.get(addIt.key) + '|' + properties.get(addIt.key);\r\n            all.set(addIt.key, newVal);\r\n            if ((declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color'\r\n              && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select')\r\n              || !declaredProperties[addIt.key]) { // for non-string properties i.e color\r\n              newVal = shared.get(addIt.key) + '|' + properties.get(addIt.key);\r\n              shared.set(addIt.key, newVal);\r\n            }\r\n          } else { // toRemove array since addIt is still iterating\r\n            toRemove.push(addIt.key);\r\n          }\r\n        }\r\n        for (var i = 0; i < toRemove.length; i++) { // removes anything that doesn't showAllPropertiess\r\n          shared.remove(toRemove[i]);\r\n          all.remove(toRemove[i]);\r\n        }\r\n      } else {\r\n        // Adds missing properties to all with the correct amount of seperators\r\n        var addIt = properties.iterator;\r\n        while (addIt.next()) {\r\n          if (all.has(addIt.key)) {\r\n            if ((declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color'\r\n              && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select')\r\n              || !declaredProperties[addIt.key]) { // for non-string properties i.e color\r\n              var newVal = all.get(addIt.key) + '|' + properties.get(addIt.key);\r\n              all.set(addIt.key, newVal);\r\n            }\r\n          } else {\r\n            var newVal = '';\r\n            for (var i = 0; i < nodecount - 1; i++) newVal += '|';\r\n            newVal += properties.get(addIt.key);\r\n            all.set(addIt.key, newVal);\r\n          }\r\n        }\r\n        // Adds bars in case properties is not in all\r\n        addIt = all.iterator;\r\n        while (addIt.next()) {\r\n          if (!properties.has(addIt.key)) {\r\n            if ((declaredProperties[addIt.key] && declaredProperties[addIt.key].type !== 'color'\r\n              && declaredProperties[addIt.key].type !== 'checkbox' && declaredProperties[addIt.key].type !== 'select')\r\n              || !declaredProperties[addIt.key]) { // for non-string properties i.e color\r\n              var newVal = all.get(addIt.key) + '|';\r\n              all.set(addIt.key, newVal);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      nodecount++;\r\n    }\r\n    // builds the table property rows and sets multipleProperties to help with updateall\r\n    var mapIt;\r\n    if (!this.showAllProperties) mapIt = shared.iterator;\r\n    else mapIt = all.iterator;\r\n    while (mapIt.next()) {\r\n      tbody.appendChild(this.buildPropertyRow(mapIt.key, mapIt.value)); // shows the properties that are allowed\r\n    }\r\n    table.appendChild(tbody);\r\n    mainDiv.appendChild(table);\r\n    var allIt = all.iterator;\r\n    while (allIt.next()) {\r\n      this._multipleProperties[allIt.key] = allIt.value; // used for updateall to know which properties to change\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* @ignore\r\n* This predicate should be false if the given property should not be shown.\r\n* Normally it only checks the value of \"show\" on the property descriptor.\r\n* The default value is true.\r\n* @param {string} propertyName the property name\r\n* @param {Object} propertyDesc the property descriptor\r\n* @param {Object} inspectedObject the data object\r\n* @return {boolean} whether a particular property should be shown in this Inspector\r\n*/\r\nInspector.prototype.canShowProperty = function(propertyName, propertyDesc, inspectedObject) {\r\n  if (propertyDesc.show === false) return false;\r\n  // if \"show\" is a predicate, make sure it passes or do not show this property\r\n  if (typeof propertyDesc.show === \"function\") return propertyDesc.show(inspectedObject, propertyName);\r\n  return true;\r\n}\r\n\r\n/**\r\n* @ignore\r\n* This predicate should be false if the given property should not be editable by the user.\r\n* Normally it only checks the value of \"readOnly\" on the property descriptor.\r\n* The default value is true.\r\n* @param {string} propertyName the property name\r\n* @param {Object} propertyDesc the property descriptor\r\n* @param {Object} inspectedObject the data object\r\n* @return {boolean} whether a particular property should be shown in this Inspector\r\n*/\r\nInspector.prototype.canEditProperty = function(propertyName, propertyDesc, inspectedObject) {\r\n  if (this._diagram.isReadOnly || this._diagram.isModelReadOnly) return false;\r\n  // assume property values that are functions of Objects cannot be edited\r\n  var data = (inspectedObject instanceof go.Part) ? inspectedObject.data : inspectedObject;\r\n  var valtype = typeof data[propertyName];\r\n  if (valtype === \"function\") return false;\r\n  if (propertyDesc) {\r\n    if (propertyDesc.readOnly === true) return false;\r\n    // if \"readOnly\" is a predicate, make sure it passes or do not show this property\r\n    if (typeof propertyDesc.readOnly === \"function\") return !propertyDesc.readOnly(inspectedObject, propertyName);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param {any} propName\r\n * @param {any} propDesc\r\n * @param {any} data\r\n * @return {any}\r\n */\r\nInspector.prototype.findValue = function(propName, propDesc, data) {\r\n  var val = '';\r\n  if (propDesc && propDesc.defaultValue !== undefined) val = propDesc.defaultValue;\r\n  if (data[propName] !== undefined) val = data[propName];\r\n  if (val === undefined) return '';\r\n  return val;\r\n}\r\n\r\n/**\r\n* @ignore\r\n* This sets this._inspectedProperties[propertyName] and creates the HTML table row:\r\n*    <tr>\r\n*      <td>propertyName</td>\r\n*      <td><input value=propertyValue /></td>\r\n*    </tr>\r\n* @param {string} propertyName the property name\r\n* @param {*} propertyValue the property value\r\n* @return the table row\r\n*/\r\nInspector.prototype.buildPropertyRow = function(propertyName, propertyValue) {\r\n  var mainDiv = this._div;\r\n  var tr = document.createElement(\"tr\");\r\n\r\n  var td1 = document.createElement(\"td\");\r\n  td1.textContent = propertyName;\r\n  tr.appendChild(td1);\r\n\r\n  var td2 = document.createElement(\"td\");\r\n  var decProp = this.declaredProperties[propertyName];\r\n  var input = null;\r\n  var self = this;\r\n  function updateall() { self.updateAllProperties(); }\r\n\r\n  if (decProp && decProp.type === \"select\") {\r\n    input = document.createElement(\"select\");\r\n    this.updateSelect(decProp, input, propertyName, propertyValue);\r\n    input.addEventListener(\"change\", updateall);\r\n  } else {\r\n    input = document.createElement(\"input\");\r\n    if (input.setPointerCapture) {\r\n      input.addEventListener(\"pointerdown\", function(e) { input.setPointerCapture(e.pointerId); });\r\n    }\r\n    input.value = this.convertToString(propertyValue);\r\n    if (decProp) {\r\n      var t = decProp.type;\r\n      if (t !== 'string' && t !== 'number' && t !== 'boolean' &&\r\n        t !== 'arrayofnumber' && t !== 'point' && t !== 'size' &&\r\n        t !== 'rect' && t !== 'spot' && t !== 'margin') {\r\n        input.setAttribute(\"type\", decProp.type);\r\n      }\r\n      if (decProp.type === \"color\") {\r\n        if (input.type === \"color\") {\r\n          input.value = this.convertToColor(propertyValue);\r\n          // input.addEventListener(\"input\", updateall);\r\n          input.addEventListener(\"change\", updateall);\r\n        }\r\n      } if (decProp.type === \"checkbox\") {\r\n        input.checked = !!propertyValue;\r\n        input.addEventListener(\"change\", updateall);\r\n      }\r\n    }\r\n    if (input.type !== \"color\") input.addEventListener(\"blur\", updateall);\r\n  }\r\n\r\n  if (input) {\r\n    input.tabIndex = this.tabIndex++;\r\n    input.disabled = !this.canEditProperty(propertyName, decProp, this.inspectedObject);\r\n    td2.appendChild(input);\r\n  }\r\n  tr.appendChild(td2);\r\n\r\n  this._inspectedProperties[propertyName] = input;\r\n  return tr;\r\n};\r\n\r\n/**\r\n* @ignore\r\n* HTML5 color input will only take hex,\r\n* so var HTML5 canvas convert the color into hex format.\r\n* This converts \"rgb(255, 0, 0)\" into \"#FF0000\", etc.\r\n* @param {string} propertyValue\r\n* @return {string}\r\n*/\r\nInspector.prototype.convertToColor = function(propertyValue) {\r\n  var ctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n  ctx.fillStyle = propertyValue;\r\n  return ctx.fillStyle;\r\n};\r\n\r\n/**\r\n* @ignore\r\n* @param {string}\r\n* @return {Array.<number>}\r\n*/\r\nInspector.prototype.convertToArrayOfNumber = function(propertyValue) {\r\n  if (propertyValue === \"null\") return null;\r\n  var split = propertyValue.split(' ');\r\n  var arr = [];\r\n  for (var i = 0; i < split.length; i++) {\r\n    var str = split[i];\r\n    if (!str) continue;\r\n    arr.push(parseFloat(str));\r\n  }\r\n  return arr;\r\n};\r\n\r\n/**\r\n* @ignore\r\n* @param {*}\r\n* @return {string}\r\n*/\r\nInspector.prototype.convertToString = function(x) {\r\n  if (x === undefined) return \"undefined\";\r\n  if (x === null) return \"null\";\r\n  if (x instanceof go.Point) return go.Point.stringify(x);\r\n  if (x instanceof go.Size) return go.Size.stringify(x);\r\n  if (x instanceof go.Rect) return go.Rect.stringify(x);\r\n  if (x instanceof go.Spot) return go.Spot.stringify(x);\r\n  if (x instanceof go.Margin) return go.Margin.stringify(x);\r\n  if (x instanceof go.List) return this.convertToString(x.toArray());\r\n  if (Array.isArray(x)) {\r\n    var str = \"\";\r\n    for (var i = 0; i < x.length; i++) {\r\n      if (i > 0) str += \" \";\r\n      var v = x[i];\r\n      str += this.convertToString(v);\r\n    }\r\n    return str;\r\n  }\r\n  return x.toString();\r\n};\r\n\r\n/**\r\n* @ignore\r\n* Update all of the HTML in this Inspector.\r\n*/\r\nInspector.prototype.updateAllHTML = function() {\r\n  var inspectedProps = this._inspectedProperties;\r\n  var diagram = this._diagram;\r\n  var isPart = this.inspectedObject instanceof go.Part;\r\n  var data = isPart ? this.inspectedObject.data : this.inspectedObject;\r\n  if (!data) {  // clear out all of the fields\r\n    for (var name in inspectedProps) {\r\n      var input = inspectedProps[name];\r\n      if (input instanceof HTMLSelectElement) {\r\n        input.innerHTML = \"\";\r\n      } else if (input.type === \"color\") {\r\n        input.value = \"#000000\";\r\n      } else if (input.type === \"checkbox\") {\r\n        input.checked = false;\r\n      } else {\r\n        input.value = \"\";\r\n      }\r\n\r\n    }\r\n  } else {\r\n    for (var name in inspectedProps) {\r\n      var input = inspectedProps[name];\r\n      var propertyValue = data[name];\r\n      if (input instanceof HTMLSelectElement) {\r\n        var decProp = this.declaredProperties[name];\r\n        this.updateSelect(decProp, input, name, propertyValue);\r\n      } else if (input.type === \"color\") {\r\n        input.value = this.convertToColor(propertyValue);\r\n      } else if (input.type === \"checkbox\") {\r\n        input.checked = !!propertyValue;\r\n      } else {\r\n        input.value = this.convertToString(propertyValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n* @ignore\r\n* Update an HTMLSelectElement with an appropriate list of choices, given the propertyName\r\n*/\r\nInspector.prototype.updateSelect = function(decProp, select, propertyName, propertyValue) {\r\n  select.innerHTML = \"\";  // clear out anything that was there\r\n  var choices = decProp.choices;\r\n  if (typeof choices === \"function\") choices = choices(this.inspectedObject, propertyName);\r\n  if (!Array.isArray(choices)) choices = [];\r\n  decProp.choicesArray = choices;  // remember list of actual choice values (not strings)\r\n  for (var i = 0; i < choices.length; i++) {\r\n    var choice = choices[i];\r\n    var opt = document.createElement(\"option\");\r\n    opt.text = this.convertToString(choice);\r\n    select.add(opt, null);\r\n  }\r\n  select.value = this.convertToString(propertyValue);\r\n}\r\n\r\n/**\r\n* @ignore\r\n* Update all of the data properties of {@link #inspectedObject} according to the\r\n* current values held in the HTML input elements.\r\n*/\r\nInspector.prototype.updateAllProperties = function() {\r\n  var inspectedProps = this._inspectedProperties;\r\n  var diagram = this._diagram;\r\n  if (diagram.selection.count === 1 || !this.multipleSelection) { // single object update\r\n    var isPart = this.inspectedObject instanceof go.Part;\r\n    var data = isPart ? this.inspectedObject.data : this.inspectedObject;\r\n    if (!data) return;  // must not try to update data when there's no data!\r\n\r\n    diagram.startTransaction('set all properties');\r\n    for (var name in inspectedProps) {\r\n      var input = inspectedProps[name];\r\n      var value = input.value;\r\n\r\n      // don't update \"readOnly\" data properties\r\n      var decProp = this.declaredProperties[name];\r\n      if (!this.canEditProperty(name, decProp, this.inspectedObject)) continue;\r\n\r\n      // If it's a boolean, or if its previous value was boolean,\r\n      // parse the value to be a boolean and then update the input.value to match\r\n      var type = '';\r\n      if (decProp !== undefined && decProp.type !== undefined) {\r\n        type = decProp.type;\r\n      }\r\n      if (type === '') {\r\n        var oldval = data[name];\r\n        if (typeof oldval === 'boolean') type = 'boolean'; // infer boolean\r\n        else if (typeof oldval === 'number') type = 'number';\r\n        else if (oldval instanceof go.Point) type = 'point';\r\n        else if (oldval instanceof go.Size) type = 'size';\r\n        else if (oldval instanceof go.Rect) type = 'rect';\r\n        else if (oldval instanceof go.Spot) type = 'spot';\r\n        else if (oldval instanceof go.Margin) type = 'margin';\r\n      }\r\n\r\n      // convert to specific type, if needed\r\n      switch (type) {\r\n        case 'boolean': value = !(value === false || value === 'false' || value === '0'); break;\r\n        case 'number': value = parseFloat(value); break;\r\n        case 'arrayofnumber': value = this.convertToArrayOfNumber(value); break;\r\n        case 'point': value = go.Point.parse(value); break;\r\n        case 'size': value = go.Size.parse(value); break;\r\n        case 'rect': value = go.Rect.parse(value); break;\r\n        case 'spot': value = go.Spot.parse(value); break;\r\n        case 'margin': value = go.Margin.parse(value); break;\r\n        case 'checkbox': value = input.checked; break;\r\n        case 'select': value = decProp.choicesArray[input.selectedIndex]; break;\r\n      }\r\n\r\n      // in case parsed to be different, such as in the case of boolean values,\r\n      // the value shown should match the actual value\r\n      input.value = value;\r\n\r\n      // modify the data object in an undo-able fashion\r\n      diagram.model.setDataProperty(data, name, value);\r\n\r\n      // notify any listener\r\n      if (this.propertyModified !== null) this.propertyModified(name, value, this);\r\n    }\r\n    diagram.commitTransaction('set all properties');\r\n  } else { // selection object update\r\n    diagram.startTransaction('set all properties');\r\n    for (var name in inspectedProps) {\r\n      var input = inspectedProps[name];\r\n      var value = input.value;\r\n      var arr1 = value.split('|');\r\n      var arr2 = [];\r\n      if (this._multipleProperties[name]) {\r\n        // don't split if it is union and its checkbox type\r\n        if (this.declaredProperties[name] && this.declaredProperties[name].type === 'checkbox' && this.showAllProperties) {\r\n          arr2.push(this._multipleProperties[name]);\r\n        } else {\r\n          arr2 = this._multipleProperties[name].toString().split('|');\r\n        }\r\n      }\r\n      var it = diagram.selection.iterator;\r\n      var change = false;\r\n      if (this.declaredProperties[name] && this.declaredProperties[name].type === 'checkbox') change = true; // always change checkbox\r\n      if (arr1.length < arr2.length // i.e Alpha|Beta -> Alpha procs the change\r\n        && (!this.declaredProperties[name] // from and to links\r\n          || !(this.declaredProperties[name] // do not change color checkbox and choices due to them always having less\r\n            && (this.declaredProperties[name].type === 'color' || this.declaredProperties[name].type === 'checkbox' || this.declaredProperties[name].type === 'choices')))) {\r\n        change = true;\r\n      } else { // standard detection in change in properties\r\n        for (var j = 0; j < arr1.length && j < arr2.length; j++) {\r\n          if (!(arr1[j] === arr2[j])\r\n            && !(this.declaredProperties[name] && this.declaredProperties[name].type === 'color' && arr1[j].toLowerCase() === arr2[j].toLowerCase())) {\r\n            change = true;\r\n          }\r\n        }\r\n      }\r\n      if (change) { // only change properties it needs to change instead all of them\r\n        for (var i = 0; i < diagram.selection.count; i++) {\r\n          it.next();\r\n          var isPart = it.value instanceof go.Part;\r\n          var data = isPart ? it.value.data : it.value;\r\n\r\n          if (data) { // ignores the selected node if there is no data\r\n            if (i < arr1.length) value = arr1[i];\r\n            else value = arr1[0];\r\n\r\n            // don't update \"readOnly\" data properties\r\n            var decProp = this.declaredProperties[name];\r\n            if (!this.canEditProperty(name, decProp, it.value)) continue;\r\n\r\n            // If it's a boolean, or if its previous value was boolean,\r\n            // parse the value to be a boolean and then update the input.value to match\r\n            var type = '';\r\n            if (decProp !== undefined && decProp.type !== undefined) {\r\n              type = decProp.type;\r\n            }\r\n            if (type === '') {\r\n              var oldval = data[name];\r\n              if (typeof oldval === 'boolean') type = 'boolean'; // infer boolean\r\n              else if (typeof oldval === 'number') type = 'number';\r\n              else if (oldval instanceof go.Point) type = 'point';\r\n              else if (oldval instanceof go.Size) type = 'size';\r\n              else if (oldval instanceof go.Rect) type = 'rect';\r\n              else if (oldval instanceof go.Spot) type = 'spot';\r\n              else if (oldval instanceof go.Margin) type = 'margin';\r\n            }\r\n\r\n            // convert to specific type, if needed\r\n            switch (type) {\r\n              case 'boolean': value = !(value === false || value === 'false' || value === '0'); break;\r\n              case 'number': value = parseFloat(value); break;\r\n              case 'arrayofnumber': value = this.convertToArrayOfNumber(value); break;\r\n              case 'point': value = go.Point.parse(value); break;\r\n              case 'size': value = go.Size.parse(value); break;\r\n              case 'rect': value = go.Rect.parse(value); break;\r\n              case 'spot': value = go.Spot.parse(value); break;\r\n              case 'margin': value = go.Margin.parse(value); break;\r\n              case 'checkbox': value = input.checked; break;\r\n              case 'select': value = decProp.choicesArray[input.selectedIndex]; break;\r\n            }\r\n\r\n            // in case parsed to be different, such as in the case of boolean values,\r\n            // the value shown should match the actual value\r\n            input.value = value;\r\n\r\n            // modify the data object in an undo-able fashion\r\n            diagram.model.setDataProperty(data, name, value);\r\n\r\n            // notify any listener\r\n            if (this.propertyModified !== null) this.propertyModified(name, value, this);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    diagram.commitTransaction('set all properties');\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}