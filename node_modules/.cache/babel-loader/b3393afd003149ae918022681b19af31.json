{"ast":null,"code":"// Copyright (C) 1998-2022 by Northwoods Software Corporation. All Rights Reserved.\nimport { __extends } from 'tslib';\nimport * as go from 'gojs';\nimport * as React from 'react';\n\nvar ReactDiagram = function (_super) {\n  __extends(ReactDiagram, _super);\n\n  function ReactDiagram(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.wasCleared = false;\n    _this.modelChangedListener = null;\n    _this.divRef = React.createRef();\n    return _this;\n  }\n\n  ReactDiagram.prototype.getDiagram = function () {\n    if (this.divRef.current === null) return null;\n    return go.Diagram.fromDiv(this.divRef.current);\n  };\n\n  ReactDiagram.prototype.clear = function () {\n    var diagram = this.getDiagram();\n\n    if (diagram !== null) {\n      diagram.clear();\n      this.wasCleared = true;\n    }\n  };\n\n  ReactDiagram.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.divRef.current === null) return;\n    var diagram = this.props.initDiagram();\n    diagram.div = this.divRef.current;\n\n    this.modelChangedListener = function (e) {\n      if (e.isTransactionFinished && e.model && !e.model.isReadOnly && _this.props.onModelChange) {\n        var dataChanges = e.model.toIncrementalData(e);\n        if (dataChanges !== null) _this.props.onModelChange(dataChanges);\n      }\n    };\n\n    diagram.addModelChangedListener(this.modelChangedListener);\n    diagram.delayInitialization(function () {\n      _this.mergeData(diagram, true);\n    });\n  };\n\n  ReactDiagram.prototype.componentWillUnmount = function () {\n    var diagram = this.getDiagram();\n\n    if (diagram !== null) {\n      diagram.div = null;\n\n      if (this.modelChangedListener !== null) {\n        diagram.removeModelChangedListener(this.modelChangedListener);\n        this.modelChangedListener = null;\n      }\n    }\n  };\n\n  ReactDiagram.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style) return true;\n    if (nextProps.skipsDiagramUpdate) return false;\n    if (nextProps.nodeDataArray === this.props.nodeDataArray && nextProps.linkDataArray === this.props.linkDataArray && nextProps.modelData === this.props.modelData) return false;\n    return true;\n  };\n\n  ReactDiagram.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (prevProps.nodeDataArray === this.props.nodeDataArray && prevProps.linkDataArray === this.props.linkDataArray && prevProps.modelData === this.props.modelData) return;\n    var diagram = this.getDiagram();\n\n    if (diagram !== null) {\n      if (this.wasCleared) {\n        diagram.delayInitialization(function () {\n          _this.mergeData(diagram, true);\n\n          _this.wasCleared = false;\n        });\n      } else {\n        this.mergeData(diagram, false);\n      }\n    }\n  };\n\n  ReactDiagram.prototype.mergeData = function (diagram, isInit) {\n    var _this = this;\n\n    var model = diagram.model;\n    model.commit(function (m) {\n      if (_this.props.modelData !== undefined) {\n        m.assignAllDataProperties(m.modelData, _this.props.modelData);\n      }\n\n      m.mergeNodeDataArray(_this.props.nodeDataArray);\n\n      if (_this.props.linkDataArray !== undefined && m instanceof go.GraphLinksModel) {\n        m.mergeLinkDataArray(_this.props.linkDataArray);\n      }\n    }, isInit ? 'initial merge' : 'merge data');\n  };\n\n  ReactDiagram.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      className: this.props.divClassName,\n      style: this.props.style\n    });\n  };\n\n  return ReactDiagram;\n}(React.Component);\n\nvar ReactOverview = function (_super) {\n  __extends(ReactOverview, _super);\n\n  function ReactOverview(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.divRef = React.createRef();\n    return _this;\n  }\n\n  ReactOverview.prototype.getOverview = function () {\n    if (this.divRef.current === null) return null;\n    return go.Diagram.fromDiv(this.divRef.current);\n  };\n\n  ReactOverview.prototype.componentDidMount = function () {\n    if (this.divRef.current === null) return;\n    var overview;\n\n    if (this.props.initOverview !== undefined) {\n      overview = this.props.initOverview();\n    } else {\n      overview = new go.Overview();\n      overview.contentAlignment = go.Spot.Center;\n    }\n\n    overview.div = this.divRef.current;\n    overview.observed = this.props.observedDiagram;\n  };\n\n  ReactOverview.prototype.componentWillUnmount = function () {\n    var overview = this.getOverview();\n\n    if (overview !== null) {\n      overview.div = null;\n      overview.observed = null;\n    }\n  };\n\n  ReactOverview.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style) return true;\n    if (nextProps.observedDiagram === this.props.observedDiagram) return false;\n    return true;\n  };\n\n  ReactOverview.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevProps.observedDiagram === this.props.observedDiagram) return;\n    var overview = this.getOverview();\n\n    if (overview !== null) {\n      overview.observed = this.props.observedDiagram;\n    }\n  };\n\n  ReactOverview.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      className: this.props.divClassName,\n      style: this.props.style\n    });\n  };\n\n  return ReactOverview;\n}(React.Component);\n\nvar ReactPalette = function (_super) {\n  __extends(ReactPalette, _super);\n\n  function ReactPalette(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.wasCleared = false;\n    _this.divRef = React.createRef();\n    return _this;\n  }\n\n  ReactPalette.prototype.getPalette = function () {\n    if (this.divRef.current === null) return null;\n    return go.Diagram.fromDiv(this.divRef.current);\n  };\n\n  ReactPalette.prototype.clear = function () {\n    var palette = this.getPalette();\n\n    if (palette !== null) {\n      palette.clear();\n      this.wasCleared = true;\n    }\n  };\n\n  ReactPalette.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.divRef.current === null) return;\n    var palette = this.props.initPalette();\n    palette.div = this.divRef.current;\n    palette.delayInitialization(function () {\n      _this.mergeData(palette, true);\n    });\n  };\n\n  ReactPalette.prototype.componentWillUnmount = function () {\n    var palette = this.getPalette();\n\n    if (palette !== null) {\n      palette.div = null;\n    }\n  };\n\n  ReactPalette.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style) return true;\n    if (nextProps.nodeDataArray === this.props.nodeDataArray && nextProps.linkDataArray === this.props.linkDataArray && nextProps.modelData === this.props.modelData) return false;\n    return true;\n  };\n\n  ReactPalette.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (prevProps.nodeDataArray === this.props.nodeDataArray && prevProps.linkDataArray === this.props.linkDataArray && prevProps.modelData === this.props.modelData) return;\n    var palette = this.getPalette();\n\n    if (palette !== null) {\n      if (this.wasCleared) {\n        palette.delayInitialization(function () {\n          _this.mergeData(palette, true);\n\n          _this.wasCleared = false;\n        });\n      } else {\n        this.mergeData(palette, false);\n      }\n    }\n  };\n\n  ReactPalette.prototype.mergeData = function (diagram, isInit) {\n    var _this = this;\n\n    var model = diagram.model;\n    model.commit(function (m) {\n      if (_this.props.modelData !== undefined) {\n        m.assignAllDataProperties(m.modelData, _this.props.modelData);\n      }\n\n      m.mergeNodeDataArray(_this.props.nodeDataArray);\n\n      if (_this.props.linkDataArray !== undefined && m instanceof go.GraphLinksModel) {\n        m.mergeLinkDataArray(_this.props.linkDataArray);\n      }\n    }, isInit ? 'initial merge' : 'merge data');\n  };\n\n  ReactPalette.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.divRef,\n      className: this.props.divClassName,\n      style: this.props.style\n    });\n  };\n\n  return ReactPalette;\n}(React.Component);\n\nexport { ReactDiagram, ReactOverview, ReactPalette };","map":null,"metadata":{},"sourceType":"module"}